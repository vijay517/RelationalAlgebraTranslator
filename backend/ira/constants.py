from ira.enum.token_type import TokenType

DIFFERENCE = '-'
UNION = '∪'
INTERSECTION = '∩'
NATURAL_JOIN = '⋈'
LEFT_JOIN = '⧑'
RIGHT_JOIN = '⧒'
FULL_JOIN = '⧓'
ANTI_JOIN = '▷'
PROJECTION = 'π'
SELECT = 'σ'
RENAME = 'ρ'
ARROW = '➡'
CARTESIAN = '⨯'

AND = "and"
OR = "or"
NOT = "not"

GREATER_THAN = ">"
LESSER_THAN = "<"
GREATER_THAN_OR_EQUALS_TO = ">="
LESSER_THAN_OR_EQUALS_TO = "<="
EQUALS = "="

OPEN_PARENTHESIS = '('
CLOSED_PARENTHESIS = ')'

LOGICAL_OPERATORS = (AND, OR, NOT)
COMPARATIVE_OPERATORS = (GREATER_THAN, GREATER_THAN_OR_EQUALS_TO, LESSER_THAN, LESSER_THAN_OR_EQUALS_TO, EQUALS)

LOGICAL_OPERATORS_TO_TOKEN_TYPE = {AND: TokenType.AND, NOT: TokenType.NOT, OR: TokenType.OR}

COMPARATIVE_OPERATORS_TO_TOKEN_TYPE = {GREATER_THAN: TokenType.GREATER_THAN, LESSER_THAN: TokenType.LESSER_THAN,
                                       GREATER_THAN_OR_EQUALS_TO: TokenType.GREATER_THAN_OR_EQUALS_TO,
                                       LESSER_THAN_OR_EQUALS_TO: TokenType.LESSER_THAN_OR_EQUALS_TO,
                                       EQUALS: TokenType.EQUALS}

QUERY_BINARY_OPERATORS_TO_TOKEN_TYPE = {NATURAL_JOIN: TokenType.NATURAL_JOIN, LEFT_JOIN: TokenType.LEFT_JOIN,
                                        RIGHT_JOIN: TokenType.RIGHT_JOIN, FULL_JOIN: TokenType.FULL_JOIN,
                                        DIFFERENCE: TokenType.DIFFERENCE, ANTI_JOIN: TokenType.ANTI_JOIN,
                                        INTERSECTION: TokenType.INTERSECTION, UNION: TokenType.UNION,
                                        CARTESIAN: TokenType.CARTESIAN}

BINARY_OPERATORS_TO_TOKEN_TYPE = {**QUERY_BINARY_OPERATORS_TO_TOKEN_TYPE,
                                  **LOGICAL_OPERATORS_TO_TOKEN_TYPE}

UNARY_OPERATORS_TO_TOKEN_TYPE = {SELECT: TokenType.SELECT, PROJECTION: TokenType.PROJECTION, RENAME: TokenType.RENAME}

TOKEN_TYPE_TO_QUERY_BINARY_OPERATOR = {value: key for key, value in QUERY_BINARY_OPERATORS_TO_TOKEN_TYPE.items()}
TOKEN_TYPE_TO_BINARY_OPERATOR = {value: key for key, value in BINARY_OPERATORS_TO_TOKEN_TYPE.items()}
TOKEN_TYPE_TO_UNARY_OPERATOR = {value: key for key, value in UNARY_OPERATORS_TO_TOKEN_TYPE.items()}
TOKEN_TYPE_TO_OPERATOR = {**TOKEN_TYPE_TO_BINARY_OPERATOR, **TOKEN_TYPE_TO_UNARY_OPERATOR}
TOKEN_TYPE_OPERATORS = TOKEN_TYPE_TO_OPERATOR.keys()

LOGICAL_OPERATORS_TOKEN_TYPE = LOGICAL_OPERATORS_TO_TOKEN_TYPE.values()
COMPARATIVE_OPERATORS_TOKEN_TYPE = COMPARATIVE_OPERATORS_TO_TOKEN_TYPE.values()
